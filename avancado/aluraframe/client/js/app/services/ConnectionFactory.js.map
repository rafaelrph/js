{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["dbName","versionDb","stores","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStore","target","result","onsuccess","bind","onerror","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,Y;AACTC,qB,GAAY,C;AACZC,kB,GAAS,CAAC,aAAD,C;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AAET,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACH;;;;oDAEsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,MAAtB,EAA8BC,SAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,UAACC,CAAD,EAAO;AACjCV,kDAAkBW,YAAlB,CAA+BD,EAAEE,MAAF,CAASC,MAAxC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,UAACJ,CAAD,EAAO;AAC3B,oCAAG,CAACZ,UAAJ,EAAgB;AACZA,iDAAaY,EAAEE,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAM;AACrB,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYW,OAAZ,GAAsB,UAACN,CAAD,EAAO;AACzBN,uCAAO,6CAAP;AACH,6BAFD;AAGH,yBArBM,CAAP;AAsBH;;;sDAEwB;AACrB,4BAAGN,UAAH,EAAe;AACXC;AACAD,yCAAa,IAAb;AACH;AACJ;;;iDAEmBA,U,EAAY;AAC5BD,+BAAOoB,OAAP,CAAe,iBAAS;AACpB,gCAAGnB,WAAWoB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD;AAC5CtB,2CAAWuB,iBAAX,CAA6BD,KAA7B;AACH;AACDtB,uCAAWwB,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH","file":"ConnectionFactory.js","sourcesContent":["\r\nconst dbName = \"cursoalura\";\r\nconst versionDb = 1;\r\nconst stores = ['negociacoes'];\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n    constructor() {\r\n        throw new Error(\"Não é possível criar uma instância de ConnectionFactory.\");\r\n    }\r\n\r\n    static getConnection() {\r\n        return new Promise((resolve, reject) => {\r\n            let openRequest = window.indexedDB.open(dbName, versionDb);\r\n\r\n            openRequest.onupgradeneeded = (e) => {\r\n                ConnectionFactory._createStore(e.target.result)\r\n            };\r\n\r\n            openRequest.onsuccess = (e) => {\r\n                if(!connection) {\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = () => {\r\n                        throw new Error(\"Você não pode fechar diretamente a conexão.\");\r\n                    }\r\n                }\r\n                resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = (e) => {\r\n                reject(\"Não foi possível buscar ou criar a conexão.\");\r\n            };\r\n        });\r\n    }\r\n\r\n    static closeConnection() {\r\n        if(connection) {\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n\r\n    static _createStore(connection) {\r\n        stores.forEach(store => {\r\n            if(connection.objectStoreNames.contains(store)) {\r\n                connection.deleteObjectStore(store);\r\n            }\r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        });\r\n    }\r\n}\r\n"]}