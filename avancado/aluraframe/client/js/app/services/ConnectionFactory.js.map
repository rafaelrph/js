{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","dbName","versionDb","stores","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStore","target","result","onsuccess","bind","onerror","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AACA,IAAIA,oBAAqB,YAAY;AACjC,QAAMC,SAAS,YAAf;AACA,QAAMC,YAAY,CAAlB;AACA,QAAMC,SAAS,CAAC,aAAD,CAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,0DAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBZ,MAAtB,EAA8BC,SAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,UAACC,CAAD,EAAO;AACjCf,0CAAkBgB,YAAlB,CAA+BD,EAAEE,MAAF,CAASC,MAAxC;AACH,qBAFD;;AAIAR,gCAAYS,SAAZ,GAAwB,UAACJ,CAAD,EAAO;AAC3B,4BAAG,CAACX,UAAJ,EAAgB;AACZA,yCAAaW,EAAEE,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAM;AACrB,sCAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,UAACN,CAAD,EAAO;AACzBN,+BAAO,6CAAP;AACH,qBAFD;AAGH,iBArBM,CAAP;AAsBH;AA7BL;AAAA;AAAA,8CA+B6B;AACrB,oBAAGL,UAAH,EAAe;AACXC;AACAD,iCAAa,IAAb;AACH;AACJ;AApCL;AAAA;AAAA,yCAsCwBA,UAtCxB,EAsCoC;AAC5BD,uBAAOmB,OAAP,CAAe,iBAAS;AACpB,wBAAGlB,WAAWmB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD;AAC5CrB,mCAAWsB,iBAAX,CAA6BD,KAA7B;AACH;AACDrB,+BAAWuB,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBALD;AAMH;AA7CL;;AAAA;AAAA;AA+CH,CAvDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["\r\nvar ConnectionFactory = (function () {\r\n    const dbName = \"cursoalura\";\r\n    const versionDb = 1;\r\n    const stores = ['negociacoes'];\r\n\r\n    let connection = null;\r\n    let close = null;\r\n\r\n    return class ConnectionFactory {\r\n\r\n        constructor() {\r\n            throw new Error(\"Não é possível criar uma instância de ConnectionFactory.\");\r\n        }\r\n\r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n                let openRequest = window.indexedDB.open(dbName, versionDb);\r\n\r\n                openRequest.onupgradeneeded = (e) => {\r\n                    ConnectionFactory._createStore(e.target.result)\r\n                };\r\n\r\n                openRequest.onsuccess = (e) => {\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = () => {\r\n                            throw new Error(\"Você não pode fechar diretamente a conexão.\");\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n\r\n                openRequest.onerror = (e) => {\r\n                    reject(\"Não foi possível buscar ou criar a conexão.\");\r\n                };\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if(connection) {\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n\r\n        static _createStore(connection) {\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n        }\r\n    }\r\n})();"]}